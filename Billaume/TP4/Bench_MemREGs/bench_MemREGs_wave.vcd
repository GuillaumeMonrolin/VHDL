$date
  Mon Dec 14 16:35:36 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module textio $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module std_logic_textio $end
$upscope $end
$scope module std_logic_arith $end
$upscope $end
$scope module std_logic_unsigned $end
$upscope $end
$scope module bench_memregs $end
$var reg 8 ! xin_s[7:0] $end
$var reg 1 " a_s $end
$var reg 1 # d_s $end
$var reg 1 $ sa_s $end
$var reg 1 % clk_s $end
$var reg 1 & reset_s $end
$var reg 8 ' frommem_s[7:0] $end
$var reg 8 ( aout_s[7:0] $end
$var reg 8 ) dout_s[7:0] $end
$scope module memregs_test $end
$var reg 8 * xin[7:0] $end
$var reg 1 + a $end
$var reg 1 , d $end
$var reg 1 - sa $end
$var reg 1 . clk $end
$var reg 1 / reset $end
$var reg 8 0 aout[7:0] $end
$var reg 8 1 dout[7:0] $end
$var reg 8 2 frommem[7:0] $end
$var reg 8 3 registredout[7:0] $end
$var reg 8 4 registreaout[7:0] $end
$var reg 8 5 ramout[7:0] $end
$scope module rega $end
$var reg 8 6 d[7:0] $end
$var reg 1 7 clk $end
$var reg 1 8 load $end
$var reg 1 9 nrst $end
$var reg 8 : q[7:0] $end
$upscope $end
$scope module regd $end
$var reg 8 ; d[7:0] $end
$var reg 1 < clk $end
$var reg 1 = load $end
$var reg 1 > nrst $end
$var reg 8 ? q[7:0] $end
$upscope $end
$scope module rom $end
$var reg 8 @ address[7:0] $end
$var reg 8 A datain[7:0] $end
$var reg 1 B wr_ena $end
$var reg 8 C dataout[7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b00011111 !
0"
0#
0$
0%
0&
b00001010 '
b00000000 (
b00000000 )
b00011111 *
0+
0,
0-
0.
0/
b00000000 0
b00000000 1
b00001010 2
b00000000 3
b00000000 4
b00001010 5
b00011111 6
07
08
09
b00000000 :
b00011111 ;
0<
0=
0>
b00000000 ?
b00000000 @
b00011111 A
0B
b00001010 C
#2000000
1%
1.
17
1<
#4000000
0%
0.
07
0<
#6000000
1%
1.
17
1<
#8000000
0%
0.
07
0<
#10000000
b00000010 !
1%
b00000010 *
1.
b00000010 6
17
b00000010 ;
1<
b00000010 A
#12000000
0%
0.
07
0<
#14000000
1%
1.
17
1<
#15000000
1&
1/
19
1>
#16000000
0%
0.
07
0<
#18000000
1%
1.
17
1<
#20000000
1"
0%
1+
0.
07
18
0<
#22000000
1%
b00010111 '
b00000010 (
1.
b00000010 0
b00010111 2
b00000010 4
b00010111 5
17
b00000010 :
1<
b00000010 @
b00010111 C
#24000000
0%
0.
07
0<
#25000000
0"
0+
08
#26000000
1%
1.
17
1<
#28000000
0%
0.
07
0<
#30000000
1#
1%
b00000010 )
1,
1.
b00000010 1
b00000010 3
17
1<
1=
b00000010 ?
#32000000
0%
0.
07
0<
#34000000
1%
1.
17
1<
#35000000
0#
0,
0=
#36000000
0%
0.
07
0<
#38000000
1%
1.
17
1<
#40000000
1$
0%
1-
0.
07
0<
1B
#42000000
1%
1.
17
1<
#44000000
0%
0.
07
0<
#45000000
0$
b00000010 '
0-
b00000010 2
b00000010 5
0B
b00000010 C
#46000000
1%
1.
17
1<
#48000000
0%
0.
07
0<
#50000000
1%
0&
b00001010 '
b00000000 (
b00000000 )
1.
0/
b00000000 0
b00000000 1
b00001010 2
b00000000 3
b00000000 4
b00001010 5
17
09
b00000000 :
1<
0>
b00000000 ?
b00000000 @
b00001010 C
#52000000
0%
1&
0.
1/
07
19
0<
1>
#54000000
1%
1.
17
1<
#56000000
0%
0.
07
0<
#58000000
1%
1.
17
1<
#60000000
b00000110 !
0%
b00000110 *
0.
b00000110 6
07
b00000110 ;
0<
b00000110 A
#62000000
1%
1.
17
1<
#64000000
0%
0.
07
0<
#66000000
1%
1.
17
1<
#68000000
0%
0.
07
0<
#70000000
1%
1.
17
1<
#72000000
0%
0.
07
0<
#74000000
1%
1.
17
1<
#76000000
0%
0.
07
0<
#78000000
1%
1.
17
1<
#80000000
1"
1#
1$
0%
1+
1,
1-
0.
07
18
0<
1=
1B
#82000000
1%
b00000110 (
b00000110 )
1.
b00000110 0
b00000110 1
b00000110 3
b00000110 4
17
b00000110 :
1<
b00000110 ?
b00000110 @
#84000000
0%
0.
07
0<
#85000000
0"
0#
0$
b00000110 '
0+
0,
0-
b00000110 2
b00000110 5
08
0=
0B
b00000110 C
#86000000
1%
1.
17
1<
#88000000
0%
0.
07
0<
#90000000
1%
1.
17
1<
#92000000
0%
0.
07
0<
#94000000
1%
1.
17
1<
#96000000
0%
0.
07
0<
#98000000
1%
1.
17
1<
#100000000
0%
0.
07
0<
