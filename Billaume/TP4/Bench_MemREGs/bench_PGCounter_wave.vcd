$date
  Mon Dec 14 15:46:31 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module textio $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module std_logic_textio $end
$upscope $end
$scope module std_logic_arith $end
$upscope $end
$scope module std_logic_unsigned $end
$upscope $end
$scope module bench_pgcounter $end
$var reg 4 ! addr_s[3:0] $end
$var reg 1 " jmp_s $end
$var reg 1 # clk_s $end
$var reg 1 $ reset_s $end
$var reg 8 % inst_s[7:0] $end
$scope module pgcounter_test $end
$var reg 4 & addr[3:0] $end
$var reg 1 ' jmp $end
$var reg 1 ( clk $end
$var reg 1 ) reset $end
$var reg 8 * inst[7:0] $end
$var reg 1 + wr_ena_sig $end
$var reg 8 , dtain[7:0] $end
$var reg 4 - loadout[3:0] $end
$var reg 8 . ramout[7:0] $end
$var reg 1 / load $end
$scope module counter $end
$var reg 4 0 x[3:0] $end
$var reg 1 1 clk $end
$var reg 1 2 st $end
$var reg 1 3 nrst $end
$var reg 4 4 s[3:0] $end
$var reg 4 5 incroutput[3:0] $end
$var reg 4 6 muxinoutput[3:0] $end
$var reg 4 7 registreout[3:0] $end
$var reg 1 8 load $end
$scope module mul $end
$var reg 4 9 d0[3:0] $end
$var reg 4 : d1[3:0] $end
$var reg 1 ; sel $end
$var reg 4 < s[3:0] $end
$upscope $end
$scope module incr $end
$var reg 4 = x[3:0] $end
$var reg 4 > s[3:0] $end
$var reg 1 ? r $end
$var reg 5 @ carry[4:0] $end
$var reg 5 A incr_c[4:0] $end
$scope module incrementeur_inst(0) $end
$scope module add_inst $end
$var reg 1 B a $end
$var reg 1 C b $end
$var reg 1 D cin $end
$var reg 1 E s $end
$var reg 1 F cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(1) $end
$scope module add_inst $end
$var reg 1 G a $end
$var reg 1 H b $end
$var reg 1 I cin $end
$var reg 1 J s $end
$var reg 1 K cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(2) $end
$scope module add_inst $end
$var reg 1 L a $end
$var reg 1 M b $end
$var reg 1 N cin $end
$var reg 1 O s $end
$var reg 1 P cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(3) $end
$scope module add_inst $end
$var reg 1 Q a $end
$var reg 1 R b $end
$var reg 1 S cin $end
$var reg 1 T s $end
$var reg 1 U cout $end
$upscope $end
$upscope $end
$upscope $end
$scope module reg $end
$var reg 4 V d[3:0] $end
$var reg 1 W clk $end
$var reg 1 X load $end
$var reg 1 Y nrst $end
$var reg 4 Z q[3:0] $end
$upscope $end
$upscope $end
$scope module rom $end
$var reg 4 [ address[3:0] $end
$var reg 8 \ datain[7:0] $end
$var reg 1 ] wr_ena $end
$var reg 8 ^ dataout[7:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0000 !
0"
0#
0$
b00001010 %
b0000 &
0'
0(
0)
b00001010 *
0+
b00000000 ,
b0000 -
b00001010 .
U/
b0000 0
01
02
03
b0000 4
b0001 5
b0001 6
b0000 7
18
b0001 9
b0000 :
0;
b0001 <
b0000 =
b0001 >
0?
b00000 @
b00001 A
0B
1C
0D
1E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
0P
0Q
0R
0S
0T
0U
b0001 V
0W
1X
0Y
b0000 Z
b0000 [
b00000000 \
0]
b00001010 ^
#2000000
1#
1(
11
1W
#4000000
0#
0(
01
0W
#6000000
1#
1(
11
1W
#8000000
0#
0(
01
0W
#10000000
b0011 !
1#
b0011 &
1(
b0011 0
11
b0011 :
1W
#12000000
0#
0(
01
0W
#14000000
1#
1(
11
1W
#15000000
1$
1)
13
1Y
#16000000
0#
0(
01
0W
#18000000
1#
b00001100 %
1(
b00001100 *
b0001 -
b00001100 .
11
b0001 4
b0010 5
b0010 6
b0001 7
b0010 9
b0010 <
b0001 =
b0010 >
b00010 @
1B
0E
1F
1I
1J
b0010 V
1W
b0001 Z
b0001 [
b00001100 ^
#20000000
0#
0(
01
0W
#22000000
1#
b00010111 %
1(
b00010111 *
b0010 -
b00010111 .
11
b0010 4
b0011 5
b0011 6
b0010 7
b0011 9
b0011 <
b0010 =
b0011 >
b00000 @
0B
1E
0F
1G
0I
1J
0K
0N
0O
b0011 V
1W
b0010 Z
b0010 [
b00010111 ^
#24000000
0#
0(
01
0W
#26000000
1#
b00001110 %
1(
b00001110 *
b0011 -
b00001110 .
11
b0011 4
b0100 5
b0100 6
b0011 7
b0100 9
b0100 <
b0011 =
b0100 >
b00110 @
1B
0E
1F
1I
0J
1K
1N
1O
b0100 V
1W
b0011 Z
b0011 [
b00001110 ^
#28000000
0#
0(
01
0W
#30000000
1"
1#
b00100100 %
1'
1(
b00100100 *
b0100 -
b00100100 .
11
12
b0100 4
b0101 5
b0011 6
b0100 7
b0101 9
1;
b0011 <
b0100 =
b0101 >
b00000 @
0B
1E
0F
0G
0I
0J
0K
1L
0N
1O
0P
0S
0T
b0011 V
1W
b0100 Z
b0100 [
b00100100 ^
#32000000
0#
0(
01
0W
#34000000
1#
b00001110 %
1(
b00001110 *
b0011 -
b00001110 .
11
b0011 4
b0100 5
b0011 7
b0100 9
b0011 =
b0100 >
b00110 @
1B
0E
1F
1G
1I
0J
1K
0L
1N
1O
1W
b0011 Z
b0011 [
b00001110 ^
#35000000
0"
0'
02
b0100 6
0;
b0100 <
b0100 V
#36000000
0#
0(
01
0W
#38000000
1#
b00100100 %
1(
b00100100 *
b0100 -
b00100100 .
11
b0100 4
b0101 5
b0101 6
b0100 7
b0101 9
b0101 <
b0100 =
b0101 >
b00000 @
0B
1E
0F
0G
0I
0J
0K
1L
0N
1O
0P
0S
0T
b0101 V
1W
b0100 Z
b0100 [
b00100100 ^
#40000000
0#
0(
01
0W
#42000000
1#
b00110000 %
1(
b00110000 *
b0101 -
b00110000 .
11
b0101 4
b0110 5
b0110 6
b0101 7
b0110 9
b0110 <
b0101 =
b0110 >
b00010 @
1B
0E
1F
1I
1J
b0110 V
1W
b0101 Z
b0101 [
b00110000 ^
#44000000
0#
0(
01
0W
#46000000
1#
b01000110 %
1(
b01000110 *
b0110 -
b01000110 .
11
b0110 4
b0111 5
b0111 6
b0110 7
b0111 9
b0111 <
b0110 =
b0111 >
b00000 @
0B
1E
0F
1G
0I
1J
0K
0N
1O
0P
0S
0T
b0111 V
1W
b0110 Z
b0110 [
b01000110 ^
#48000000
0#
0(
01
0W
#50000000
1#
0$
b00001010 %
1(
0)
b00001010 *
b0000 -
b00001010 .
11
03
b0000 4
b0001 5
b0001 6
b0000 7
b0001 9
b0001 <
b0000 =
b0001 >
0G
0J
0L
0O
b0001 V
1W
0Y
b0000 Z
b0000 [
b00001010 ^
#52000000
0#
1$
0(
1)
01
13
0W
1Y
#54000000
1#
b00001100 %
1(
b00001100 *
b0001 -
b00001100 .
11
b0001 4
b0010 5
b0010 6
b0001 7
b0010 9
b0010 <
b0001 =
b0010 >
b00010 @
1B
0E
1F
1I
1J
b0010 V
1W
b0001 Z
b0001 [
b00001100 ^
#56000000
0#
0(
01
0W
#58000000
1#
b00010111 %
1(
b00010111 *
b0010 -
b00010111 .
11
b0010 4
b0011 5
b0011 6
b0010 7
b0011 9
b0011 <
b0010 =
b0011 >
b00000 @
0B
1E
0F
1G
0I
1J
0K
0N
0O
b0011 V
1W
b0010 Z
b0010 [
b00010111 ^
#60000000
0#
0(
01
0W
#62000000
1#
b00001110 %
1(
b00001110 *
b0011 -
b00001110 .
11
b0011 4
b0100 5
b0100 6
b0011 7
b0100 9
b0100 <
b0011 =
b0100 >
b00110 @
1B
0E
1F
1I
0J
1K
1N
1O
b0100 V
1W
b0011 Z
b0011 [
b00001110 ^
#64000000
0#
0(
01
0W
#66000000
1#
b00100100 %
1(
b00100100 *
b0100 -
b00100100 .
11
b0100 4
b0101 5
b0101 6
b0100 7
b0101 9
b0101 <
b0100 =
b0101 >
b00000 @
0B
1E
0F
0G
0I
0J
0K
1L
0N
1O
0P
0S
0T
b0101 V
1W
b0100 Z
b0100 [
b00100100 ^
#68000000
0#
0(
01
0W
#70000000
b0101 !
1#
b00110000 %
b0101 &
1(
b00110000 *
b0101 -
b00110000 .
b0101 0
11
b0101 4
b0110 5
b0110 6
b0101 7
b0110 9
b0101 :
b0110 <
b0101 =
b0110 >
b00010 @
1B
0E
1F
1I
1J
b0110 V
1W
b0101 Z
b0101 [
b00110000 ^
#72000000
0#
0(
01
0W
#74000000
1#
b01000110 %
1(
b01000110 *
b0110 -
b01000110 .
11
b0110 4
b0111 5
b0111 6
b0110 7
b0111 9
b0111 <
b0110 =
b0111 >
b00000 @
0B
1E
0F
1G
0I
1J
0K
0N
1O
0P
0S
0T
b0111 V
1W
b0110 Z
b0110 [
b01000110 ^
#76000000
0#
0(
01
0W
#78000000
1#
b10000001 %
1(
b10000001 *
b0111 -
b10000001 .
11
b0111 4
b1000 5
b1000 6
b0111 7
b1000 9
b1000 <
b0111 =
b1000 >
b01110 @
1B
0E
1F
1I
0J
1K
1N
0O
1P
1S
1T
b1000 V
1W
b0111 Z
b0111 [
b10000001 ^
#80000000
1"
0#
1'
0(
01
12
b0101 6
1;
b0101 <
b0101 V
0W
#82000000
1#
b00110000 %
1(
b00110000 *
b0101 -
b00110000 .
11
b0101 4
b0110 5
b0101 7
b0110 9
b0101 =
b0110 >
b00010 @
0G
1J
0K
0N
1O
0P
0S
0T
1W
b0101 Z
b0101 [
b00110000 ^
#84000000
0#
0(
01
0W
#85000000
0"
0'
02
b0110 6
0;
b0110 <
b0110 V
#86000000
1#
b01000110 %
1(
b01000110 *
b0110 -
b01000110 .
11
b0110 4
b0111 5
b0111 6
b0110 7
b0111 9
b0111 <
b0110 =
b0111 >
b00000 @
0B
1E
0F
1G
0I
1J
0K
0N
1O
0P
0S
0T
b0111 V
1W
b0110 Z
b0110 [
b01000110 ^
#88000000
0#
0(
01
0W
#90000000
1#
b10000001 %
1(
b10000001 *
b0111 -
b10000001 .
11
b0111 4
b1000 5
b1000 6
b0111 7
b1000 9
b1000 <
b0111 =
b1000 >
b01110 @
1B
0E
1F
1I
0J
1K
1N
0O
1P
1S
1T
b1000 V
1W
b0111 Z
b0111 [
b10000001 ^
#92000000
0#
0(
01
0W
#94000000
1#
bUUUUUUUU %
1(
bUUUUUUUU *
b1000 -
bUUUUUUUU .
11
b1000 4
b1001 5
b1001 6
b1000 7
b1001 9
b1001 <
b1000 =
b1001 >
0?
b00000 @
0B
1E
0F
0G
0I
0J
0K
0L
0N
0O
0P
1Q
0S
1T
0U
b1001 V
1W
b1000 Z
b1000 [
bUUUUUUUU ^
#96000000
0#
0(
01
0W
#98000000
1#
1(
b1001 -
11
b1001 4
b1010 5
b1010 6
b1001 7
b1010 9
b1010 <
b1001 =
b1010 >
b00010 @
1B
0E
1F
1I
1J
b1010 V
1W
b1001 Z
b1001 [
#100000000
0#
0(
01
0W
