$date
  Tue Nov 17 08:24:14 2020
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$scope module standard $end
$upscope $end
$scope module std_logic_1164 $end
$upscope $end
$scope module numeric_std $end
$upscope $end
$scope module bench_incrementeur $end
$var reg 4 ! x_s[3:0] $end
$var reg 4 " x_u[3:0] $end
$var reg 1 # r_s $end
$var reg 4 $ s_s[3:0] $end
$scope module increment_test $end
$var reg 4 % x[3:0] $end
$var reg 4 & s[3:0] $end
$var reg 1 ' r $end
$var reg 5 ( carry[4:0] $end
$var reg 5 ) incr_c[4:0] $end
$scope module incrementeur_inst(0) $end
$scope module add_inst $end
$var reg 1 * a $end
$var reg 1 + b $end
$var reg 1 , cin $end
$var reg 1 - s $end
$var reg 1 . cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(1) $end
$scope module add_inst $end
$var reg 1 / a $end
$var reg 1 0 b $end
$var reg 1 1 cin $end
$var reg 1 2 s $end
$var reg 1 3 cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(2) $end
$scope module add_inst $end
$var reg 1 4 a $end
$var reg 1 5 b $end
$var reg 1 6 cin $end
$var reg 1 7 s $end
$var reg 1 8 cout $end
$upscope $end
$upscope $end
$scope module incrementeur_inst(3) $end
$scope module add_inst $end
$var reg 1 9 a $end
$var reg 1 : b $end
$var reg 1 ; cin $end
$var reg 1 < s $end
$var reg 1 = cout $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b0001 !
b0001 "
0#
b0010 $
b0001 %
b0010 &
0'
b00010 (
b00001 )
1*
1+
0,
0-
1.
0/
00
11
12
03
04
05
06
07
08
09
0:
0;
0<
0=
#5000000
b0010 !
b0010 "
b0011 $
b0010 %
b0011 &
b00000 (
0*
1-
0.
1/
01
12
03
06
07
#10000000
b0011 !
b0011 "
b0100 $
b0011 %
b0100 &
b00110 (
1*
0-
1.
11
02
13
16
17
#15000000
b0100 !
b0100 "
b0101 $
b0100 %
b0101 &
b00000 (
0*
1-
0.
0/
01
02
03
14
06
17
08
0;
0<
#20000000
b0101 !
b0101 "
b0110 $
b0101 %
b0110 &
b00010 (
1*
0-
1.
11
12
#25000000
b0110 !
b0110 "
b0111 $
b0110 %
b0111 &
b00000 (
0*
1-
0.
1/
01
12
03
06
17
08
0;
0<
#30000000
b0111 !
b0111 "
b1000 $
b0111 %
b1000 &
b01110 (
1*
0-
1.
11
02
13
16
07
18
1;
1<
#35000000
b1000 !
b1000 "
0#
b1001 $
b1000 %
b1001 &
0'
b00000 (
0*
1-
0.
0/
01
02
03
04
06
07
08
19
0;
1<
0=
#40000000
b1001 !
b1001 "
b1010 $
b1001 %
b1010 &
b00010 (
1*
0-
1.
11
12
#45000000
b1010 !
b1010 "
b1011 $
b1010 %
b1011 &
b00000 (
0*
1-
0.
1/
01
12
03
06
07
#50000000
b1011 !
b1011 "
b1100 $
b1011 %
b1100 &
b00110 (
1*
0-
1.
11
02
13
16
17
#55000000
b1100 !
b1100 "
0#
b1101 $
b1100 %
b1101 &
0'
b00000 (
0*
1-
0.
0/
01
02
03
14
06
17
08
0;
1<
0=
#60000000
b1101 !
b1101 "
b1110 $
b1101 %
b1110 &
b00010 (
1*
0-
1.
11
12
#65000000
b1110 !
b1110 "
0#
b1111 $
b1110 %
b1111 &
0'
b00000 (
0*
1-
0.
1/
01
12
03
06
17
08
0;
1<
0=
#70000000
b1111 !
b1111 "
1#
b0000 $
b1111 %
b0000 &
1'
b11110 (
1*
0-
1.
11
02
13
16
07
18
1;
0<
1=
#75000000
b0000 !
b0000 "
0#
b0001 $
b0000 %
b0001 &
0'
b00000 (
0*
1-
0.
0/
01
02
03
04
06
07
08
09
0;
0<
0=
#80000000
b0001 !
b0001 "
b0010 $
b0001 %
b0010 &
b00010 (
1*
0-
1.
11
12
#85000000
b0010 !
b0010 "
b0011 $
b0010 %
b0011 &
b00000 (
0*
1-
0.
1/
01
12
03
06
07
#90000000
b0011 !
b0011 "
b0100 $
b0011 %
b0100 &
b00110 (
1*
0-
1.
11
02
13
16
17
#95000000
b0100 !
b0100 "
b0101 $
b0100 %
b0101 &
b00000 (
0*
1-
0.
0/
01
02
03
14
06
17
08
0;
0<
#100000000
b0101 !
b0101 "
b0110 $
b0101 %
b0110 &
b00010 (
1*
0-
1.
11
12
